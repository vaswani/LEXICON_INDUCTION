Code overview
-------------
GMCCA.m         - main class for running the Matching CCA with graphs.
CCAUtil.m       - a class containing static functions for computing CCA.
MatchingUtil.m  - a class containing static functions for computing Matchings.
BilexiconUtil.m - a class containing static functions for loading Bilexicons and scoring matchings.
Common.m        - a class containing general static utility functions, mostly for input/output
Util.m          - a class containing general static utility functions.


GMCCA.run() -- a function that loads the data, executes the algorithm and outputs scores.
-----------
The parameters governing the execution are set in the makeOptions() function.
These are:
* T - the maximum number of "EM" iterations
* weight_type - type of similarity matrix the matching algorithm gets.
options.d = d;                         % ignore this. used to govern the dimensionality of the input.
options.K = K;                         % parameter for graph (for knn-graphs, K is the number of neighbors, eps neighborhood graphs - eps.)
options.lambda = lambda;               % weight assigned to graph features and
options.M = M;                         % degree to use graph.
% for example, K+(lambda*G)K+(lambda*G)^2K .. *(lambda*G)^MK,
% try M=1, lambda>1 first.
options.max_seed = max_seed;           % maximum length of seed.
options.delta_pm = delta_pm;           % increment percent of partial matching 


Sanity Check
------------
The sanity check function in GMCCA first generates data according to
the generative story of matching CCA and then tries to recover it.

To run the sanity check in matlab, simply type in matlab

GMCCA.sanityCheck();

and notice the parameters.
You can change the input parameters through the function call,
or change their default values in the code.


A correct output should look as follows:

########## start output
MCCA.sanityCheck()

(some warnings)
1), cost=1237487.944  inner=5414.455  hamming=917.000000
increased pm.length=130
2), cost=177706.279  inner=7411.394  hamming=887.000000
increased pm.length=180
3), cost=54333.267  inner=4726.498  hamming=844.000000
increased pm.length=230
4), cost=47358.869  inner=3952.066  hamming=752.000000
increased pm.length=280
5), cost=44343.245  inner=3739.307  hamming=665.000000
increased pm.length=330
6), cost=41145.762  inner=3504.301  hamming=547.000000
increased pm.length=380
7), cost=39883.384  inner=3459.293  hamming=382.000000
increased pm.length=430
8), cost=38978.061  inner=3536.312  hamming=167.000000
increased pm.length=480
9), cost=36861.246  inner=3796.197  hamming=0.000000
....

19), cost=35496.023  inner=3958.673  hamming=0.000000
increased pm.length=1000
20), cost=34705.176  inner=3962.269  hamming=0.000000
Fixed point after t=20 iterations
Recovered = 1 hamdist=0

####### end output #######



Pipeline - from data generation to results
------------------------------------------

Note: Data formats: 
if not mentioned otherwise, the format of all the data files is csv (comma separated values)

* Data Preparation
To run the matching function, few files need to be prepared
1) source language data - containing word features, and graphs on words
2) target language data - same as above.
3) bilexicon ground truth (i.e., dictionary) to compare results against.

To prepare the language data (1&2 above), use the script makeMat.m (in the scripts\ library)
or directly via the function in lexsyn2mat.m

Its input is two pairs of file names, per each language
one for the language features, and another for the graph (e.g., synonym graph on the words).
the language feature file should be in the format

2. Matching - running GMCCA.run() and tuning hyperparamters.




