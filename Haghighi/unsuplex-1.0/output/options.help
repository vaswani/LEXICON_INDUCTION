bitextOptions.domainCorpusPath <  str> :  [source.corpus]
bitextOptions.codomainCorpusPath <  str> :  [target.corpus]
bitextOptions.domainAdditionalCorpusPath <  str> :  [source-additional.corpus.gz]
bitextOptions.codomainAdditionalCorpusPath <  str> :  [target-additional.corpus.gz]
bitextOptions.domainPOSPath    <  str> :  [source.tagmap]
bitextOptions.codomainPOSPath  <  str> :  [target.tagmap]
bitextOptions.lexiconPath      <  str> :  [lexicon]
probCCA.tau                    <  dbl> : Tradeoff between correlation (0) and covariance (1) for CCA [0.00]
probCCA.maxB                   <  int> : Number of bases to extract for CCA [2147483647]
probCCA.verbose                <  int> : Verbosity level [0]
probCCA.scoreType              < enum> : Type of score [negL2Dist] logProb|negL2Dist|dotProd
probCCA.oldNormHacks           < bool> : Normalize some things to get back to the original [false]
probCCA.discardCorrelations    < bool> : Do not scale by correlations [false]
probCCA.normalizeProjections   < bool> : Normalize all projections [true]
ccaInducer.finalNorm           < bool> :  [false]
ccaInducer.useRankPrior        < bool> :  [false]
ccaInducer.useL2Dist           < bool> :  [false]
ccaInducer.penaltyCoef         <  dbl> :  [1.0]
ccaInducer.penaltyAlpha        <  dbl> :  [1.05]
ccaInducer.doPenaltyLog        < bool> :  [true]
ccaInducer.penaltyCounts       <  dbl> :  [10.0]
exec.create                    < bool> : Whether to create a directory for this run; if not, don't generate output files [true]
exec.monitor                   < bool> : Whether to create a thread to monitor the status. [false]
exec.execDir                   <  str> : Directory to put all output files; if blank, use execPoolDir. [output]
exec.execPoolDir               <  str> : Directory which contains all the executions (or symlinks). []
exec.actualExecPoolDir         <  str> : Directory which actually holds the executions. []
exec.overwriteExecDir          < bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [true]
exec.useStandardExecPoolDirStrategy < bool> : Assume in the run directory, automatically set execPoolDir and actualExecPoolDir [false]
exec.printOptionsAndExit       < bool> : Simply print options and exit. [false]
exec.miscOptions               < str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 []
exec.addToView                 < str*> : Name of the view to add this execution to in the servlet []
exec.recordPath                <  str> : Record file to write to []
exec.charEncoding              <  str> : Character encoding []
exec.jarFiles                  < str*> : Name of jar files to load prior to execution []
exec.dontInitializeJars        < bool> : Skip initialization of jars [false]
exec.initializeJarsAfterDirCreation < bool> : Initialize from jars after copying them to a newly created execDir [false]
exec.makeThunk                 < bool> : Make a thunk (a delayed computation). [false]
exec.thunkAutoQueue            < bool> : A note to the servlet to automatically run the thunk when it sees it [false]
exec.thunkPriority             <  int> : Priority of the thunk. [0]
exec.thunkMainClassName        <  str> : Launch this class []
exec.thunkJavaOpts             <  str> : Java options to pass to Java when later running the thunk []
exec.thunkUseScala             < bool> : Use Scala to run rather than Java [false]
exec.thunkReqMemory            <  int> : Use Scala to run rather than Java (in MB) [1024]
exec.dontCatchExceptions       < bool> : Whether to catch exceptions (ignored when making a thunk) [false]
kernelCCA.ccaWeight            <  dbl> : Weight given to CCA [1.0]
kernelCCA.scaWeight            <  dbl> : Weight given to shared correlation analysis (SCA) [1.0]
kernelCCA.tau                  <  dbl> : Tradeoff between correlation (0) and covariance (1) for CCA [0.8]
kernelCCA.scaTau               <  dbl> : Tradeoff between correlation (0) and covariance (1) for SCA [1.0]
kernelCCA.maxB                 <  int> : Number of bases to extract for CCA [2147483647]
kernelCCA.scaMaxB              <  int> : Number of bases to extract for SCA [2147483647]
kernelCCA.method               < enum> : Method to use to solve CCA (Cholesky works) [cholesky] primal|dual|cholesky
kernelCCA.eta                  <  dbl> : Threshold for stopping the incomplete Cholesky [1.0E-4]
kernelCCA.symmetric            < bool> : When using primal or dual methods, whether to solve for y using x (assymetric is faster) [false]
kernelCCA.ccaNormalize         < bool> : Whether to normalize representations for CCA [false]
kernelCCA.scaNormalize         < bool> : Whether to normalize representations for SCA [false]
kernelCCA.verbose              <  int> : Verbosity level [0]
kernelCCA.probabilistic        < bool> : Return a output kernel that gives p(x, y) [false]
kernelCCA.priorVar             <  dbl> : Variance for prior p(z) [1.0]
kernelCCA.likelihoodVar        <  dbl> : Variance for likelihood p(x | z); we could learn this [1.0]
kernelCCA.weightBases          < bool> : Weight bases when computing output kernel [false]
Options.disjointCorpora        < bool> :  [false]
Options.wordsPOS               <  str> :  [noun]
Options.contextPOS             <  str> :  [noun]
Options.uniqueContextPOS       <  str> :  [all]
Options.numContextWords        <  int> :  [2147483647]
Options.numWords               <  int> :  [2000]
Options.windowSize             <  int> :  [4]
Options.uniqueWindowSize       <  int> :  [1]
Options.contextType            < enum> :  [UNDISTINGUISHED] POSITIONAL|DIRECTIONAL|UNDISTINGUISHED
Options.uniqueContextType      < enum> :  [POSITIONAL] POSITIONAL|DIRECTIONAL|UNDISTINGUISHED
Options.eStepType              < enum> :  [EXACT_BIPARTITE] EXACT_BIPARTITE|APPROX_BIPARTITE|GREEDY
Options.seedSize               <  int> :  [100]
Options.threshLevels           <  int> :  [6]
Options.orthoWeight            <  dbl> :  [1.0]
Options.contextWeight          <  dbl> :  [1.0]
Options.similarityWeight       <  dbl> :  [0.0]
Options.verbose                < bool> :  [false]
Options.basePath               <  str> :  [en-es]
Options.combinedInducer        < bool> :  [false]
Options.justEditDist           < bool> :  [false]
Options.useSharedStringKernel  < bool> : Use SCA [false]
Options.stringKernelAlpha      <  dbl> :  [0.9]
Options.iters                  <  int> :  [10]
Options.kernelWeight           <  dbl> :  [1.0]
Options.editWeight             <  dbl> :  [0.0]
Options.rankWeight             <  dbl> :  [0.0]
Options.uniqueWeight           <  dbl> :  [0.0]
Options.justLogRank            < bool> :  [false]
Options.useLogCountHack        < bool> :  [false]
Options.useLogUniqueContextHack < bool> :  [false]
Options.iterativeSeedFactor    <  dbl> :  [0.5]
Options.numParallelSentences   <  int> :  [0]
Options.useHardEM              < bool> :  [false]
Options.useWeightedBootstrap   < bool> :  [false]
Options.useAlignmentInducer    < bool> :  [false]
Options.maxNumParallelSentences <  int> :  [5000]
Options.maxAdditionalSents     <  int> :  [0]
Options.maxSentences           <  int> : for fast debugging. [2147483647]
Options.useDiceSeedMapping     < bool> :  [false]
Options.printCanonicalPDF      < bool> :  [false]
Options.numCanonicalPDFWords   <  int> :  [6]
Options.useEqualWordHack       < bool> :  [false]
Options.editDistSeed           < bool> :  [false]
Options.useLogLinear           < bool> :  [false]
Options.numWindows             <  int> :  [0]
Options.doRankTest             < bool> :  [false]
Options.writeSeedDict          < bool> :  [false]
Options.useProbCCA             < bool> :  [true]
Options.unitModelType          < enum> :  [NONE] NONE|GAUSSIAN|MULTI_GAUSSIAN
log.maxIndLevel                <  int> : Maximum indent level. [10]
log.msPerLine                  <  int> : Maximum number of milliseconds between consecutive lines of output. [1000]
log.file                       <  str> : File to write log. [output/log]
log.stdout                     < bool> : Whether to output to the console. [true]
log.note                       <  str> : Dummy placeholder for a comment []
log.forcePrint                 < bool> : Force printing from logs* [true]
log.maxPrintErrors             <  int> : Maximum number of errors (via error()) to print [10000]
evalOptions.evalAlpha          <  dbl> :  [1.0]
evalOptions.recallTargets      <  unk> :  [0.1 0.25 0.33 0.5 0.75]
logLinear.numIters             <  int> :  [10]
logLinear.numReductionSteps    <  int> : Number of reduction steps when optimizing [10]
logLinear.regularization       <  dbl> :  [0.0]
logLinear.initType             < enum> : Type of initialization [randomPred] truePred|randomPred|seedPred|editDist
logLinear.initStepSize         <  dbl> :  [1.0]
logLinear.temperature          <  dbl> : Temperature (when 0, get MAP) [1.0]
logLinear.useSeed              < bool> : Whether to use seed mapping to learn [false]
logLinear.allowNull            < bool> : Whether to permit null-aligned words [false]
logLinear.models               <enum*> :  [forw back]
logLinear.features             <enum*> :  [editDist]
logLinear.initRandom           < rand> :  [1]
logLinear.tmpExample           < bool> :  [false]
logLinear.convergenceThreshold <  dbl> :  [1.0E-4]
logLinear.maxCholeskyBases     <  int> :  [10]
logLinear.clampToSeed          < bool> : When learning, always get seed predictions right [true]
